#pragma once
#include <boost/optional.hpp>

namespace logicker::core::constraint::extractor::value {
  template<typename GridSlotId, typename GridValueType>
  class slot_value : public value_extractor<GridValueType, grid<GridSlotId, GridValueType>> {
    public:
      slot_value( GridSlotId slot_id );
      GridValueType extract( const grid<GridSlotId, GridValueType>& grid, bool throw_on_undecided = true ) const override;
    private:
      GridSlotId slot_id_;
  };

  template<typename GridSlotId, typename GridValueType>
  slot_value<GridSlotId, GridValueType>::slot_value( GridSlotId slot_id ) : slot_id_{ slot_id } {}

  template<typename GridSlotId, typename GridValueType>
  GridValueType
  slot_value<GridSlotId, GridValueType>::extract( const grid<GridSlotId, GridValueType>& grid, bool throw_on_undecided ) const {
    auto slot = grid.get_slot( slot_id_ );
    if ( slot.is_decided() ){
      auto result = slot.get_decided_value();
      if ( result ) {
        return result.get();
      } else {
        throw "constraint::exractor::value::slot_value::extract: empty value not impled";
      }
    } else if ( throw_on_undecided ){
      throw "constraint::extractor::value::slot_value::extract: not impled";
    } else {
      //tady je totiz neco spatne, tahle metoda by spis mela vracet optional<optional<GridValueType>>, ale to zas dava smysl, jen pokud pripoustim empties (ve slotu muze byt empty value), jinymi slovy nedomysleno
      throw "constraint::extractor::value::slot_value::extract: not throwing on undecided not impled";
    }
  }
}
